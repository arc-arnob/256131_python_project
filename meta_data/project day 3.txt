from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import sqlite3

import sys

from PyQt5.uic import loadUiType

ui ,_ = loadUiType('library.ui')


class MainApp(QMainWindow, ui):
    def __int__(self):
        QMainWindow.__init__(self)
        self.setupUi(self)

    def Handle_UI_Changes(self):
        self.Hide_Themes()
        self.tabWidget.tabBar().setVisible(False)

    def Handle_Buttons(self):
        self.pushButton_5.clicked.connect(self.Show_Themes)
        self.pushButton_18.clicked.connect(self.Hide_Themes)
        self.pushButton.clicked.connect(self.Open_day_to_day)
        self.pushButton_2.clicked.connect(self.Open_book)
        self.pushButton_3.clicked.connect(self.Open_user)
        self.pushButton_4.clicked.connect(self.Open_setting)
        self.pushButton_8.clicked.connect(self.Add_books)
        self.pushButton_13.clicked.connect(self.Add_category)
        self.pushButton_24.clicked.connect(self.Add_Author)
        self.pushButton_25.clicked.connect(self.Add_publisher)
        self.pushButton_7.clicked.connect(self.Search_books)
        self.pushButton_10.clicked.connect(self.Edit_Books)
        self.pushButton_9.clicked.connect(self.Delete_books)
        self.pushButton_11.clicked.connect(self.Add_New_User)
        self.pushButton_14.clicked.connect(self.Login)

    def Show_Themes(self):
        self.groupBox3.show()

    def Hide_Themes(self):
        self.groupBox3.hide()
        #print("Yes Here")

    def Open_day_to_day(self):
        self.tabWidget.setCurrentIndex(0)

    def Open_book(self):
        self.tabWidget.setCurrentIndex(1)

    def Open_user(self):
        self.tabWidget.setCurrentIndex(2)

    def Open_setting(self):
        self.tabWidget.setCurrentIndex(3)

    ##########Books Database############

    def Add_books(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()

        book_title = self.lineEdit.text()
        book_desc = self.textEdit_2.toPlainText()
        book_code = self.lineEdit_2.text()
        book_price = self.lineEdit_6.text()
        book_author = self.comboBox_9.currentIndex()
        book_publisher = self.comboBox_10.currentIndex()
        book_category = self.comboBox_3.currentIndex()

        cursor.execute('''INSERT INTO book(name,desc,code,price,book_author,book_publisher,book_category)
         VALUES(?,?,?,?,?,?,?)''',
                       (book_title, book_desc, book_code, book_price, book_author, book_publisher, book_category))
        
        db.commit()
        self.statusbar.showMessage("New Book Successfully Added!")
        self.lineEdit.setText('')
        self.textEdit_2.setPlainText('')
        self.lineEdit_2.setText('')
        self.lineEdit_6.setText('')
        self.comboBox_9.setCurrentIndex(0)
        self.comboBox_10.setCurrentIndex(0)
        self.comboBox_3.setCurrentIndex(0)

    def Search_books(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()
        book_title = self.lineEdit_8.text()

        cursor.execute("""SELECT * FROM book WHERE name=? """, (book_title,))
        data = cursor.fetchone()
        if data:
            self.lineEdit_22.setText(data[1])
            self.textEdit_3.setPlainText(data[2])
            self.lineEdit_7.setText(data[3])
            self.comboBox_11.setCurrentIndex(data[5])
            self.comboBox_12.setCurrentIndex(data[6])
            self.comboBox_4.setCurrentIndex(data[7])
            self.lineEdit_9.setText(str(data[4]))

    def Edit_Books(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()

        book_title = self.lineEdit_22.text()
        book_desc = self.textEdit_3.toPlainText()
        book_code = self.lineEdit_7.text()
        book_price = int(self.lineEdit_9.text())
        book_author = self.comboBox_11.currentIndex()
        book_publisher = self.comboBox_12.currentIndex()
        book_category = self.comboBox_4.currentIndex()
        search_book_title = self.lineEdit_8.text()
        print(search_book_title)

        cursor.execute('''UPDATE book SET name=?,desc=?,code=?,price=?,book_author=?,book_publisher=?,book_category=? WHERE name = ?''',
                       (book_title, book_desc, book_code, book_price, book_author,book_publisher, book_category, search_book_title))
        db.commit()
        self.statusbar.showMessage("Record Successfully Updated!")

    def Delete_books(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()
        warning = QMessageBox.warning(self,"Delete Book ", "Are you sure you want to delete this book?", QMessageBox.Yes | QMessageBox.No)
        if warning == QMessageBox.Yes:
            search_book_title = self.lineEdit_8.text()
            cursor.execute("""DELETE FROM book WHERE name = ?""", (search_book_title,))
            db.commit()
            self.statusbar.showMessage("Record Successfully Deleted!")

    """##########User Database#############"""
    def Add_New_User(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()

        username = self.lineEdit_11.text()
        email = self.lineEdit_12.text()
        password = self.lineEdit_13.text()
        cnfPassword = self.lineEdit_14.text()

        if password == cnfPassword:
            cursor.execute("""INSERT INTO user(user_name, user_email,user_password) VALUES(?,?,?)""",
                           (username, email, password))
            db.commit()
            self.statusbar.showMessage("User Added Successfully!")
        else:
            self.label_22.setText("password didn't match")

    def Login(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()

        username = self.lineEdit_24.text()
        password = self.lineEdit_23.text()

        cursor.execute("""SELECT user_name, user_password FROM user """)
        data = cursor.fetchall() #"""Change it accordingly"""
        for row in data:
            if username == row[0] and password == row[1]:
                print("match")


    def Edit_user(self):
        pass

    """##########Setting Database#############"""
    def Add_category(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()
        category_name = self.lineEdit_19.text()
        cursor.execute('''INSERT INTO category(category_name) VALUES(?)''', (category_name,))
        db.commit()
        self.statusbar.showMessage("New Category Successfully Added!")
        self.lineEdit_19.setText('')
        self.Show_category()
        self.Show_Category_Combobox()

    def Show_category(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()

        cursor.execute('''SELECT category_name FROM category''')
        data = cursor.fetchall()

        # print(data) Works
        if data:
            self.tableWidget_3.setRowCount(0)
            self.tableWidget_3.insertRow(0)
            for row, form in enumerate(data):
                for column , item in enumerate(form):
                    self.tableWidget_3.setItem(row, column, QTableWidgetItem(str(item)))
                    column += 1
                row_position = self.tableWidget_3.rowCount()
                self.tableWidget_3.insertRow(row_position)


    def Add_Author(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()
        author_name = self.lineEdit_20.text()
        cursor.execute('''INSERT INTO authors(author_name) VALUES(?)''', (author_name,))
        db.commit()
        self.statusbar.showMessage("New Author name Successfully Added!")
        self.lineEdit_20.setText('')
        self.Show_Author()
        self.Show_Author_Combobox()

    def Show_Author(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()

        cursor.execute('''SELECT author_name FROM authors''')
        data = cursor.fetchall()

        if data:
            self.tableWidget_4.setRowCount(0)
            self.tableWidget_4.insertRow(0)
            for row, form in enumerate(data):
                for column, item in enumerate(form):
                    self.tableWidget_4.setItem(row, column, QTableWidgetItem(str(item)))
                    column += 1
                row_position = self.tableWidget_4.rowCount()
                self.tableWidget_4.insertRow(row_position)


    def Add_publisher(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()
        publisher_name = self.lineEdit_21.text()
        cursor.execute('''INSERT INTO publisher(publisher_name) VALUES(?)''', (publisher_name,))
        db.commit()
        self.statusbar.showMessage("New Publisher name Successfully Added!")
        self.lineEdit_21.setText('')
        self.Show_Publisher()
        self.Show_Publisher_Combobox()

    def Show_Publisher(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()

        cursor.execute('''SELECT publisher_name FROM publisher''')
        data = cursor.fetchall()

        if data:
            self.tableWidget_5.setRowCount(0)
            self.tableWidget_5.insertRow(0)
            for row, form in enumerate(data):
                for column, item in enumerate(form):
                    self.tableWidget_5.setItem(row, column, QTableWidgetItem(str(item)))
                    column += 1
                row_position = self.tableWidget_5.rowCount()
                self.tableWidget_5.insertRow(row_position)
    ###### Showin setting in combobox ###########

    def Show_Category_Combobox(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()

        cursor.execute('''SELECT category_name FROM category''')
        data = cursor.fetchall()
        self.comboBox_3.clear()
        for item in data:
            self.comboBox_3.addItem(item[0])
            self.comboBox_4.addItem(item[0])


    def Show_Author_Combobox(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()

        cursor.execute('''SELECT author_name FROM authors''')
        data = cursor.fetchall()
        self.comboBox_9.clear()
        for item in data:
            self.comboBox_9.addItem(item[0])
            self.comboBox_11.addItem(item[0])


    def Show_Publisher_Combobox(self):
        db = sqlite3.connect('library.sqlite')
        cursor = db.cursor()

        cursor.execute('''SELECT publisher_name FROM publisher''')
        data = cursor.fetchall()
        self.comboBox_10.clear()
        for item in data:
            self.comboBox_10.addItem(item[0])
            self.comboBox_12.addItem(item[0])

def main():
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    Ui = MainApp()
    Ui.setupUi(MainWindow)
    MainWindow.show()
    """Ui Running From Here"""

    Ui.Handle_UI_Changes()
    Ui.Handle_Buttons()
    Ui.Show_category()
    Ui.Show_Author()
    Ui.Show_Publisher()
    Ui.Show_Category_Combobox()
    Ui.Show_Author_Combobox()
    Ui.Show_Publisher_Combobox()
    """End Here"""
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
